---
description: 
globs: 
alwaysApply: true
---

# Your rule content

Develop a REST API (30 marks)
For 30 marks, your task is to build a REST API from scratch, using the technologies covered in IFN666. That includes:

Node.js
Express.js
Caddy
MongoDB/Mongoose
JWT
You should also demonstrate use of tools like:

npm
VSCode
Hoppscotch
There are six "core" criteria, weighted 15 of the 30 marks.

You may choose to attempt up to five "additional" tasks, each weighted 3 marks, for a total of 15 of 30 marks.

Core: Application architecture (1 mark)
Implement your application using a layered architecture. Upon completion, your codebase should be structured as the following:

.
├── API-collection.json
├── README.md
├── package.json
├── server.js
└── src
    ├── controllers
    │   └── ...
    ├── middleware
    │   └── ...
    ├── models
    │   └── ...
    └── routes
        ├── index.js
        └── ...
At the root of your npm project, have:

A file server.js. That is the entry-point to your program.
A directory named src and within that, at least these four directories: controllers, middleware, models and routes.
A package.json file.
A README.md file and provide:
The purpose of the application.
A list of API endpoints
A description of how to contribute to the development of the application
A list of features
A list of dependencies and how to install them
A description of the applications architecture
How to report issues
A file API-collection.json

Core: Endpoints (2 marks)
Use Express to implement the REST API.

To a large extent, this core task is about implementing code in src/routes.

There is no limit to how many endpoints you may implement. However, you must implement at least 15:

Three entities, each with five endpoints:
Get all
Get by ID
Create
Update
Delete
Be sure to:

Take advantage of nested routers.
Use the appropriate HTTP methods (GET, POST, PUT, DELETE).
Respond with appropriate status codes (e.g., 200 OK, 404 Not Found).
Implement/use appropriate middleware.
Be sure to list the endpoints in the README.md file.

Core: Data model (3 marks)
Use Mongoose to implement the data model and database interface.

To a large extent, this core task is about implementing code in src/models.

You do not need to draw a diagram of the data model, however, having one may benefit you.

Be sure to implement Mongoose schemas and models, with the consideration for:

Having references between schemas.

Having at least two one-to-many or many-to-many relationships in the data model.

Core: Data interface (3 marks)
Using a "controller" architecture, connect the API endpoints to the data model, and implement any useful business logic.

To a large extent, this core task is about implementing code in src/controllers.

For each entity in your data model, be sure there is a relevant CRUD operation.



Core: Deployment to web server (3 marks)
Demonstrate your application running on the internet. Be sure to configure Caddy to direct incoming traffic to the application.

Choose an API URL like https://<student-id>.ifn666.com/assessment02/api.

Provide us a copy of /etc/caddy/Caddyfile at the root of your submission.



Core: API testing with Hoppscotch (3 marks)
Test your API using Hoppscotch, or a similar tool. Be sure to demonstrate your use of Hoppscotch (or alike) in the video and submit the collection as a JSON file (API-collection.json).

Additional: Authentication (3 marks)
You may implement user authentication with JSON web tokens (JWT).

Be sure to have endpoints for:

Registering a new user (at minimum: username, password)
Login as existing user
Some features of your API must be protected by the authentication process. For example, "get all" routes might only be available to authenticated users, or personal data can be fetched by only those it belongs to.

Additional: Rate limiting (3 marks)
You may implement rate limiting to prevent abuse of your API. Be sure to explain the limits you have imposed, and those limits should be configurable.

Additional: Query filtering (3 marks)
You may implement advanced query filtering and sorting, specifically on the "get all" routes. Be sure to explain the purpose of the query filtering and how you handle erroneous input and handle responses with no results.



Additional: Pagination (3 marks)
You may implement pagination on the "get all" routes. Be sure to explain how you implemented it and demonstrate how a client application would navigate through pages.



Additional: Use of third-party APIs (3 marks)
You may take advantage of a third-party API service to enrich the features of your API. You must implement fail-safe mechanisms and consider rate-limits that the third-party may impose. Be sure to explain how using the third-party service benefits your end-users.

Develop a web client (30 marks)
For 30 marks, your task is to build a web application from scratch, using the technologies covered in IFN666. That includes:

Vite
React
You should also demonstrate use of tools like:

npm
VSCode
React Developer Tools
The developer tools in your favourite web browser
You may demonstrate frameworks like:

Mantine
There are five "core" criteria, weighted 15 of the 30 marks.

You may choose to attempt up to five "additional" tasks, each weighted 3 marks, for a total of 15 of 30 marks.

As per the REST API, attempting more than five additional tasks is allowed but you cannot achieve more than 15 marks from these tasks. We will mark only the five you explicitly tell us to consider. You should choose the best five, as we will not mark a sixth.

Be sure to tell us which five additional tasks to consider during marking. You do that using the response to marking criteria document, described later.

Core: Application architecture (3 marks)
Implement your application using a reasonable logical isolation of components. You should have at least:

.
├── .env
├── index.html
├── package.json
├── README.md
├── vite.config.js
└── public
│   └── favicon.svg
└── src
    └── ...
There is no prescribed layout of the contents of src/ (directory), however, it must be sensible.

Be sure that package.json has scripts for running the web application in development and production modes (i.e., build).

At the root of your the project, have:

A file .env. It must contain, at least, the URL to your API.
A file index.html. This basic HTML document contains the mount point for React.
A file package.json. Generated by npm.
A file vite.config.js. Generated by Vite.
A README.md file and provide:
The purpose of the application.
A description of how to contribute to the development of the application
A list of dependencies and how to install them
A description of the applications architecture
How to report issues
A directory named public, containing the favicon.svg file.
A directory named src.


Core: User interface design (3 marks)
Focus on creating a clean, intuitive, and user-friendly interface using a UI framework. While it does not need to be award-winning, the design should be logical and easy to navigate. We highly suggest using a UI framework like Mantine.

Your application must support routing using React Router (BrowserRouter).



Core: React components (3 marks)
Build reusable and modular React components, focusing on those unique to your application. We will ignore general layout components and instead notice bespoke components specific to your project. For example, in a Task Manager app, the Task component would be considered here, while a navigation bar would fall under the previous core task.

The use of individual, standard/off-the-shelf components, like plain buttons and drop-downs, including those in UI component libraries, are not bespoke. To take these further, create your own components that take advantage of the multiple premade components -- these are considered bespoke.



Core: State management (3 marks)
Efficiently manage state using React's built-in tools. Use useState for local component state and useContext for shared/global state. The goal is to structure state management in a way that keeps components efficient, avoids unnecessary re-renders, and ensures data flows logically throughout the app.



Core: API integration (3 marks)
Fetch and display data from the REST API you built in the previous section. The application's core functionality should be driven by your own API, not a third-party service.



Additional: Authentication (3 marks)
You may implement user authentication, allowing users to log in with a username and password. This would include handling authentication tokens and managing protected routes.

Only attempt this if you are implementing the authentication task for the REST API, as the front-end will need to integrate with your existing login system.

Additional: Rate limiting (3 marks)
You may implement rate limiting to prevent overloading the REST API. This could be via debouncing or throttling, or alike.



Additional: Search and Sort (3 marks)
You may implement search and sort on interfaces that list items.

Only attempt this if you are implementing the matching query filtering task for the REST API.

You may consider client-siding search and sort, in addition to server-side search and sort.

To be clear, "search" is the same as "filter".



Additional: Pagination (3 marks)
You may implement navigating through pages of data on interaces that list items.

Only attempt this if you are implementing the matching pagination task for the REST API.

The best pagination would take advantage of server-side pagination. Otherwise, the application would be loading every available item from the server then "paginating" only at the client. That is a waste of network bandwidth, unless you have an exceptional and well-justified reason to implement pagination only on the client-side (not recommended).

Additional: Responsive design (3 marks)
You may implement your application to adapt to different screen sizes. The goal here is to ensure that your application provides a responsive and flexible user interface that works well across various screen sizes, such as desktop, tablet, and smaller windows. Keep in mind that this is not focused on developing an application specifically for mobile devices; that will be the focus of Assessment 3.













